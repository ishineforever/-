题目描述
求二叉树的先序、中序及后序遍历序列。结点数<=100。


输入
按先序遍历的顺序建立一个二叉树，为了保证树的唯一性，并在程序中的递归出口是左右子树为空，故输入时，当某结点的左子树或右子树为空值时也要作为先序遍历的有效输入。例如一个树只有3个结点，根结点值为1，其左孩子结点值为2，其右孩子结点值为3，则输入的先序遍历序列依次为1　2　0　0  3　0　0（为空时输入0值）*/


输出
在三行上，依次输出二叉树的先序、中序及后序遍历序列。序列中各数用空格隔开。


样例输入
1 2 0 0 3 0 0

样例输出
1 2 3
2 1 3
2 3 1

提示
本题可以参考数据结构（C语言版）教材的算法6.1至算法6.4。其中，算法6.4是根据先序序列构建二叉链表，可直接参考！

#include<iostream>
using namespace std;
#define MAXSIZE 100
typedef struct BiTNode
{
    int data;
    struct  BiTNode *lchild,*rchild;
} BiTNode,*BiTree;

void   creatxx(BiTree &T)
{
    int a;
    cin>>a;
    if(a==0) T=NULL;
    else
    {
        T=new BiTNode;
        T->data=a;
        creatxx(T->lchild);
        creatxx(T->rchild);
    }
}

void   xx(BiTree T)
{
    if(T)
    {
        cout<<T->data<<" ";
        xx(T->lchild);
        xx(T->rchild);
    }
}

void   zx(BiTree T)
{
    if(T)
    {
        zx(T->lchild);
        cout<<T->data<<" ";
        zx(T->rchild);
    }
}

void   hx(BiTree T)
{
    if(T)
    {
        hx(T->lchild);
        hx(T->rchild);
        cout<<T->data<<" ";
    }
}
int main(void)
{
    BiTree  T=new BiTNode;
    creatxx (T);
    xx(T);
    cout<<endl;
    zx(T);
    cout<<endl;
    hx(T);
    cout<<endl;
    return 0;
}
