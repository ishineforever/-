#include <iostream>
using namespace std;
#define  MVNum 100

typedef struct
{
    char vexs[MVNum];
    int  arcs[MVNum][MVNum];
    int  vexnum,arcnum;
}AMGraph;

bool CreateUDG(AMGraph &G)
{
    int i,j,k;
    char v1[3],v2[3];
    cin>>G.vexnum>>G.arcnum;
    for(i=0;i<G.vexnum;++i)
        for(j=0;j<G.vexnum;++j)
            G.arcs[G.vexnum][G.vexnum]=0;
    for(i=0;i<G.vexnum;++i)
        cin>>G.vexs[i];
    for(k=0;k<G.arcnum;++k)
    {
        cin>>v1>>v2;
        i=v1[1]-49;j=v2[1]-49;
        G.arcs[i][j]=1;
        G.arcs[j][i]=1;
    }
    return 0;
}

int FirstAdjvex(AMGraph G,int v)
{
	int i;
	 for(i=0;i<G.vexnum;i++)
		if(G.arcs[v][i]) return i;
	 return -1;
}


int NextAdjvex(AMGraph G,int v,int w)
{
  	int i;
	 for(i=w+1;i<G.vexnum;i++)
		if(G.arcs[v][i]) return i;
	 return -1;
}

bool visited[MVNum];
void DFS(AMGraph G,int v)
{
    int w;
    cout<<v<<" ";visited[v]=true;
    for(w=FirstAdjVex(G,v);w>=0;w=NextAdjVex(G,v,w))
        if(!visited[w])  DFS(G,w);
}

void DFSTraverse(AMGraph G)
{
    int v;
    for(v=0;v<G.vexnum;++v)
        visited[v]=false;
    for(v=0;v<G.vexnum;++v)
        if(!visited[v])
        DFS(G,v);
}
void DestroyUDG(AMGraph &G)
{

}
int main()
{
   AMGraph g;
   CreateUDG(g);
   DFSTraverse(g);
   cout << endl;
//   DestroyUDG(g);
   return 0;
}
